// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (body)
VALUES ($1)
RETURNING id, body, completed
`

func (q *Queries) CreateTodo(ctx context.Context, body string) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, body)
	var i Todo
	err := row.Scan(&i.ID, &i.Body, &i.Completed)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :one
DELETE FROM todos
WHERE id = $1
RETURNING id, body, completed
`

func (q *Queries) DeleteTodo(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRow(ctx, deleteTodo, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Body, &i.Completed)
	return i, err
}

const getTodo = `-- name: GetTodo :one
SELECT id, body, completed FROM todos
WHERE id = $1
`

func (q *Queries) GetTodo(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Body, &i.Completed)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, body, completed FROM todos
ORDER BY id
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Body, &i.Completed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markTodoAsCompleted = `-- name: MarkTodoAsCompleted :one
UPDATE todos
SET completed = TRUE
WHERE id = $1
RETURNING id, body, completed
`

func (q *Queries) MarkTodoAsCompleted(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRow(ctx, markTodoAsCompleted, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Body, &i.Completed)
	return i, err
}
